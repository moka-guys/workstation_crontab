# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command
# Demultiplexing - after running python script the status is checked. 0 = script completed without error. 1 = script did not complete. This status triggers an event to the sys log to denote if the script passed/failed, as if the script fails script generated error messages may not be issued.
0 * * * * python /usr/local/src/mokaguys/apps/automate_demultiplex/demultiplex.py > /usr/local/src/mokaguys/automate_demultiplexing_logfiles/Demultiplexing_stdout/$(date "+\%Y\%m\%d_\%H\%M\%S").txt 2>&1; status=$?; if [ $status -ne 0 ]; then echo "demultiplex script failed to complete " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t demultiplex_script_fail; else echo "successful completion of demultiplex script " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t demultiplex_script_pass; fi
# Upload Agent - after running python script the status is checked. 0 = script completed without error. 1 = script did not complete. This status triggers an event to the sys log to denote if the script passed/failed, as if the script fails script generated error messages may not be issued.
10 * * * * python /usr/local/src/mokaguys/apps/automate_demultiplex/DNANexus_upload_agent.py > /usr/local/src/mokaguys/automate_demultiplexing_logfiles/Upload_agent_stdout/$(date "+\%Y\%m\%d_\%H\%M\%S").txt 2>&1; status=$?; if [ $status -ne 0 ]; then echo "upload agent script failed to complete " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t upload_agent_fail; else echo "successful completion of upload agent script " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t upload_agent_pass; fi
# Workstation heartbeat
*/20 * * * * echo 'padam padam' 2>&1 | /usr/bin/logger -t Heartbeat
# Low space on workstation warning
0 * * * * FREE=$(df /media/data1 --output=avail | tail -n 1 );FREEHR=$(df /media/data1 --output=avail -h | tail -n 1); if [ $FREE -lt 838860371 ]; then echo "Less than 800GB on data1 ("$FREEHR"B)"; fi | /usr/bin/logger -t data1_freespace
# DNANexus platform integrity test - after running python script the status is checked. 0 = script completed without error. 1 = script did not complete. This status triggers an event to the sys log to denote if the script passed/failed, as if the script fails script generated error messages may not be issued.
0 4 * * 3 bash /usr/local/src/mokaguys/apps/DNANexus_Integrity_Test/DNANexus_Integrity_Check.sh > /usr/local/src/mokaguys/apps/DNANexus_Integrity_Test/logs/$(date "+\%y\%m\%d_\%H\%M\%S").txt 2>&1; status=$?; if [ $status -ne 0 ]; then echo "DNANexus integrity script failed to complete " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t Nexus_integrity_check_fail; else echo "successful completion of Nexy integrity check script " $(date "+\%y\%m\%d_\%H\%M\%S")|/usr/bin/logger -t Nexus_integrity_check_pass; fi
